# -*- coding: utf-8 -*-

"""
/***************************************************************************
 fdsIsochrones
                                 A QGIS plugin
 create isochrones of fire progression from FDS outputs
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-06-27
        copyright            : (C) 2023 by Eric Mueller
        email                : ericvmueller@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Eric Mueller'
__date__ = '2023-06-27'
__copyright__ = '(C) 2023 by Eric Mueller'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.core import QgsProcessingProvider
from .fds_isochrones_algorithm import fdsIsochronesAlgorithm


class fdsIsochronesProvider(QgsProcessingProvider):

    def __init__(self):
        """
        Default constructor.
        """
        QgsProcessingProvider.__init__(self)

    def unload(self):
        """
        Unloads the provider. Any tear-down steps required by the provider
        should be implemented here.
        """
        pass

    def loadAlgorithms(self):
        """
        Loads all algorithms belonging to this provider.
        """
        self.addAlgorithm(fdsIsochronesAlgorithm())

    def id(self):
        """
        Returns the unique provider id.
        """
        return 'FDS outputs'

    def name(self):
        """
        Returns the provider name, which is used to describe the provider
        within the GUI.
        """
        return 'FDS outputs'

    def icon(self):
        """
        Should return a QIcon which is used for your provider inside
        the Processing toolbox.
        """
        return QgsProcessingProvider.icon(self)

    def longName(self):
        """
        Returns the a longer version of the provider name.
        """
        return self.name()
